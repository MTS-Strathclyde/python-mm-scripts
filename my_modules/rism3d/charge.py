# -*- coding: utf-8 -*-
"""
Created on Fri May 23 09:44:21 2014

@author: max
"""

import os
import subprocess

import prmtop

MODEL_DIC = {'b3lyp' : """ $system mwords=125 $end
 $contrl dfttyp=b3lyp $end
 $basis gbasis=N31 ngauss=6 ndfunc=1 $end""",
 'mp2' : """ $system mwords=125 $end
 $contrl SCFTYP=RHF MPLEVL=2 MULT=1 ICHARG=0 $end
 $basis gbasis=N31 ngauss=6 ndfunc=1 $end """}

    

def is_float(number):
    try:
        float(number)
        return True
    except ValueError:
        return False


def extract_charges(name):
    """Extracts lowrin charges from GAMESS output file.
    Returns them as a list of floats."""
    with open(name, 'rb') as lines:
        charges = []
        for line in lines:
            if line.startswith('          TOTAL MULLIKEN AND LOWDIN ATOMIC'):
                lines.next()
                for chg_line in lines:
                    chg_line = chg_line.split()
                    if len(chg_line) == 6 and is_float(chg_line[-1]):
                        charges.append(float(chg_line[-1]))
                    else:
                        break
                break
    return charges


def calculate_charges(name, model):
    """Calculates using gamess.
    Returns charges in Amber prmtop format (electron charges times 18.2223"""
    p, no_p_name = os.path.split(name)
    print 'gam dir'
    print name
    print p
    gamin_name = '{}_{}.inp'.format(no_p_name, model)
    gamout_name = '{}_{}.out'.format(name, model)
    header = MODEL_DIC[model]
    subprocess.check_output(['babel', '-xk', header,
                             '-ipdb', '{}.pdb'.format(no_p_name),
                             '-ogamin', gamin_name], 
                             cwd=p)
    print os.getcwd()
    print p
    print os.path.isdir(p)
    print os.path.isfile(os.path.join(p, gamin_name))
    gamout = subprocess.check_output(['rungms', gamin_name,
                     '00', '1'],
                     cwd=p)
#    gamout = subprocess.check_output(['/usr/local/gamess/rungms', gamin_name,
#                     '00', '1'],
#                     cwd=p)
    
    lines = iter(gamout.splitlines())
    charges = []
    for line in lines:
        if line.startswith('          TOTAL MULLIKEN AND LOWDIN ATOMIC'):
            lines.next()
            for chg_line in lines:
                chg_line = chg_line.split()
                if len(chg_line) == 6 and is_float(chg_line[-1]):
                    charges.append(float(chg_line[-1]))
                else:
                    break
            break
    with open(gamout_name, 'wb') as f:
        f.write(gamout)
    charges = [float(chg)*18.2223 for chg in charges]
    return charges



def generate_prmtops(name, charge_model_l=None):
    """If charge model==None leaves am1-bcc charges generated by leap.
    For other purposes charge model should be a list containing different
    charge model keywords
    'zero' generates 0 charge on all atoms,
    'mp2' calls gamess to calculate and generate mp2 charges
    'b3lyp' calls gamess to generate b3lyp charges.
    prmtops are written in calculation directory and returned with the same
    names
    """
    if charge_model_l:
        prmtop_names = []
        for model in charge_model_l:
            if model == 'zero':
                new_name = name + '_' + model +'.prmtop'
                prmtop_ob = prmtop.PrmtopFile(name + '.prmtop')
                prmtop_ob.set_charges()
                prmtop_ob.write_prmtop(new_name)
                prmtop_names.append(new_name)
            elif model == 'mp2' or model == 'b3lyp':
                charges = calculate_charges(name, model)
                new_name = name + '_' + model +'.prmtop'
                prmtop_ob = prmtop.PrmtopFile(name + '.prmtop')
                prmtop_ob.set_charges(charges)
                prmtop_ob.write_prmtop(new_name)
                prmtop_names.append(new_name)
            elif model == 'am1':
                new_name = name + '_' + model +'.prmtop'
                prmtop_ob = prmtop.PrmtopFile(name + '.prmtop')
                prmtop_ob.write_prmtop(new_name)
                prmtop_names.append(new_name)
        return prmtop_names
    else:
        return [name + '.prmtop']

    
